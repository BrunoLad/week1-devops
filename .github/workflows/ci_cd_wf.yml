name: test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.x"

      - name: Install Dependencies
        run: |
          python -m pip install -r requirements.txt
      - name: Run tests
        run: |
          if [ ${{ github.event_name == 'pull_request' }} ]; then
            python -m pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=src -v tests/ | tee pytest-coverage.txt;
              # get coverage percentage from outputted pytest-coverage.txt
              coverage=$(grep 'TOTAL'  pytest-coverage.txt | awk '{print $4}')
              # remove % for comparison, using suffix-removing expansion
              coverage=${coverage%"%"}
              if [ $coverage -lt ${{ vars.MINIMUM_COVERAGE }} ]; then
              # Gets first changed file
              PR_REF= ${{ github.event.pull_request.head.ref }}
              PR_REF=${PR_REF##*/}
              git checkout --force master
              git checkout --force $PR_REF
              CHANGED_FILE=$(git diff --name-only ${{ github.event.pull_request.head.sha }} ${{ github.event.pull_request.base.sha }} | head -n -1)
              git checkout --force -
              # Creates Review Comments getting first file in changes
              # An idea is to add additional comments for each file with coverage less than
              # vars.MINIMUM_COVERAGE, but file would need to be part of changes. So scenario
              # doesn't work for files that have past low coverage, with new unit tests added
              curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/comments \
              -d '{"commit_id":"${{ github.event.pull_request.head.sha }}","body":"Coverage is less than threshold of ${{ vars.MINIMUM_COVERAGE }}%","subject_type":"file", "path":"'"$CHANGED_FILE"'"}'
              fi
            else
              python -m pytest -v tests/;
          fi
        shell: bash
      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml